import subprocess
import sys
from IPy import IP
import socket
import os

# Colors
R = '\033[31m'  # red
G = '\033[32m'  # green
C = '\033[36m'  # cyan
L = "\033[96m"  #LightCyan
W = '\033[0m'  # white
Y = '\033[33m'  # yellow

def checkNmap():
    try:
        nmap_boolean = True

        check_package = subprocess.call("nmap")
        os.system('clear')
        print("\tNmap Found!...\n ")

    except OSError as e:
        print("\t[!] Error: Nmap Not found...\n", 'red')
        nmap_boolean = False

        try:
            print("\t Intalling it For You...")

            os.system('sudo apt-get install nmap')
            return checkNmap()

        except:
            raise
            nmap_boolean = False
            return False

    except KeyboardInterrupt:
        print("\n\t[-] User Aborted! ")


def checkip(input1):
    try:
        IP(input1)
        return input1
    except ValueError:
        return socket.gethostbyname(input1)


def start():
    remoteServer = input("Enter target ip address to scan: ")
    valid_ip=checkip(remoteServer)
    print(f'\n{Y}[+] {L}Target IP Address : {W}{str(valid_ip)}')
    q = input("Would you like to go for a quick full scan- Covering all ports - against target? [y/n]")
    if q == "y":
        p1 = subprocess.Popen(['nmap', '-p-', '-T4', '-A', '-oN', 'nmap.txt', valid_ip], stdout=sys.stdout,
                              stderr=sys.stderr)
        print("__________________________________________________")
        print("Scanning " + valid_ip + " This may take some time:")
        print("--------------------------------------------------")
        output = p1.communicate()[0]
        print("------------**RESULTS**----------------------------")
        print(output)
    if q == "n":
        d = True
        while d:

            print("""\n Which type of scan would you like to go for among the following:
			1. Scans common TCP ports with version detection
			2. Scans TCP ports with version detection and would not ping host
			3. Slow Detailed Scan
			4. Packet Scan (Bypass packet inspection firewalls)
			5. Auth- Script to bypass authentication credentials.
			6. These scripts try to actively discover more about the network by querying public registries, SNMP-enabled devices, directory services.
			7. Exploit Some Vulnerability
			8. Malware (These scripts test whether the target platform is infected by malware or backdoors)
			9. Vuln (These scripts check for specific known vulnerabilities and generally only report results if they are found)
			10. Default nmap scan
			11. exit
			""")
            opt = input("Enter option number: ")
            if opt == "1":
                p1 = subprocess.Popen(['nmap', '-T4', '-A', '-v', '-oN', 'Basenmap.txt', valid_ip],
                                      stdout=sys.stdout, stderr=sys.stderr)
                print("Scanning ...")
                output = p1.communicate()[0]
                print(output)

            if opt == "2":
                p2 = subprocess.Popen(['nmap', '-p 1-65535', '-T4', '-A', '-v', '-Pn', valid_ip], stdout=sys.stdout,
                                      stderr=sys.stderr)
                print("Scanning...")
                output = p2.communicate()[0]
                print(output)
            if opt == "3":
                p3 = subprocess.Popen(
                    ['nmap', '-sS', '-sU', '-T4', '-A', '-v', '-PE', '-PP', '-PS80,443', '-PA3389', '-PU40125', '-PY',
                     '-g 53', '--script', "default or (discovery and safe)", valid_ip], stdout=sys.stdout,
                    stderr=sys.stderr)
                print("Scanning ..")
                output3 = p3.communicate()[0]
                print(output3)
            if opt == "4":
                p4 = subprocess.Popen(['nmap', '-v', '-f', valid_ip], stdout=sys.stdout, stderr=sys.stderr)
                print("Scanning")
                output4 = p4.communicate()[0]

            if opt == "5":
                p5 = subprocess.Popen(['nmap', '--script=auth', '-v', valid_ip], stdout=sys.stdout,
                                      stderr=sys.stderr)
                print("Scanning..")
                output5 = p5.communicate()[0]
                print(output5)

            if opt == "6":
                p6 = subprocess.Popen(['nmap', '--script=discovery', '-v', valid_ip], stdout=sys.stdout,
                                      stderr=sys.stderr)
                print("Scanning ..")
                output6 = p6.communicate()[0]
                print(output6)
            if opt == "7":
                p7 = subprocess.Popen(['nmap', '--script=exploit', '-v', valid_ip], stdout=sys.stdout,
                                      stderr=sys.stderr)
                print("Scanning ...")
                output7 = p7.communicate()[0]
                print(output7)
            if opt == "8":
                p8 = subprocess.Popen(['nmap', '--script=malware', '-v', valid_ip, '-oN', 'malware_nmap.txt'],
                                      stdout=sys.stdout, stderr=sys.stderr)
                print("Scanning ...")
                output8 = p8.communicate()[0]
                print(output8)
            if opt == "9":
                p9 = subprocess.Popen(['nmap', '--script=vulners', '-v', '-oX', 'vulners_nmap.xml', valid_ip],
                                      stdout=sys.stdout, stderr=sys.stderr)
                print("Scanning ...")
                output9 = p9.communicate()[0]
                print(output9)
            if opt == "10":
                p10 = subprocess.Popen(['nmap', valid_ip], stdout=sys.stdout, stderr=sys.stderr)
                print("Scanning ...")
                output10 = p10.communicate()[0]
                print(output10)
            if opt == "exit" or opt == "11":
                print("Closing nmap")
                sys.exit()
    else:
        print("No Input Specified")
